# N-body benchmark problem
# TODO:
# Unary negation
# Exponential notation
# module-level variables
import prelude

type Vec3 = {Float64,Float64,Float64}
type Body = {pos:Vec3, vel:Vec3, mass:Float64}
func Body.energy(): self.vel * self.vel * self.mass * 0.5
func potential(a, b): a.mass * b.mass * (a.pos - b.pos).length()

func energy(bodies):
  sum = 0
  for a in bodies:
    set sum += a.energy()
    for b in bodies:
      set sum -= potential(a, b)
  sum

func advance(bodies, dt):
  for a in bodies:
    for b in bodies:
      let dist = b.pos - a.pos
      let f = d * (dt / pow(dist.length(), 3.0))
      set a.vel += f * b.mass
      set b.vel += f * a.mass
  for a in bodies:
    set a.pos = a.pos + dt * a.vel

func main():
  let pi = 3.14158979
  let days_per_year = 365.24
  let sun_mass = 4.0 * pi * pi

  let jup = Body(
    Vec3(4.84143144246472090, -1.16032004402742839, -0.103622044471123109),
    Vec3(1.66007664274403694e-3, 7.69901118419740425e-3, -6.90460016972063023e-5) * days_per_year,
    9.54791938424326609e-4 * sun_mass)
  let sat = Body(
    Vec3(8.34336671824457987, 4.12479856412430479, -0.403523417114321381),
    Vec3(-2.76742510726862411e-3, 4.99852801234917238e-3, 2.30417297573763929e-5) * days_per_year,
    2.85885980666130812e-4 * sun_mass)
  let ura = Body(
    Vec3(1.28943695621391310e+01, -1.51111514016986312e+01, -2.23307578892655734e-1),
    Vec3(2.96460137564761618e-3, 2.37847173959480950e-3, -2.96589568540237556e-5) * days_per_year,
    4.36624404335156298e-5 * sun_mass)
  let nep = Body(
    Vec3(1.53796971148509165e+01, -2.59193146099879641e+01, 1.79258772950371181e-1),
    Vec3(2.68067772490389322e-3, 1.62824170038242295e-3, -9.51592254519715870e-5) * days_per_yer,
    5.15138902046611451e-5 * sun_mass)
  let sun = Body(
    Vec3(0.0, 0.0, 0.0),
    [jup, sat, ura, nep].sum(x => x.vel * x.mass) / -sun_mass,
    sun_mass)

  let bodies = [sun, jup, sat, ura, nep]
  printf("%f\n", energy bodies)
  for i in range(10000): advance(bodies, 0.01)
  printf("%f\n", energy bodies)
  0
