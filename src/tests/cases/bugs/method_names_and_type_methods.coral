c_extern printf: Func[Ptr, ..., Void]

type Person = {age:Int32}

# Instance methods and type methods are declared the same way.
func Person.getType(): "Person"

# Anything that has a "self" in it is inferred to be an instance method.
# Name resolution can tell us this is a function, because "self" will
# be a free variable in its scope.
func Person.getAge(): self.age

# Call-site strategy: When defining methods, we statically know whether
# it's a instance or type method. However, at the call site, we're not sure whether
# (expr).foo() is "func typeof(expr)::foo(expr)" or "member[foo](expr)()"

# So in the type system, we represent free functions as "Func[T, R]"
# and methods as Method[T, R]. Any Call(Method[T, R], t1, t2) node gets resolved
# by unifying with the self term.
func main():
  let robert = Person(3)
  let a = Person.getType()
  let b = robert.getType()
  let c = robert.getAge()
  printf("(%s)\n", a)
  printf("(%s)\n", b)
  printf("(%d)\n", c)
  # let p = Person(10, "bob")
  # printf("(%s)\n", p.Item1)
  # # From an instance you can call type methods or instance methods
  # p.typeMethod()
  # p.instanceMethod()
  # From a type you can call type methods or instance methods with explicit self parameter
  # Person.typeMethod()
  # Person.instanceMethod(p)
  0
